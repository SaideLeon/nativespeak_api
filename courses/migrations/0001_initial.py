# Generated by Django 5.2.7 on 2025-10-07 20:51

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DialogueContent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('context', models.TextField(blank=True, help_text='Contexto do diálogo')),
                ('order', models.IntegerField(default=0)),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Exercise',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('exercise_type', models.CharField(choices=[('fill_blank', 'Fill in the Blanks'), ('multiple_choice', 'Multiple Choice'), ('matching', 'Matching'), ('true_false', 'True or False'), ('ordering', 'Put in Order'), ('writing', 'Free Writing'), ('speaking', 'Speaking Practice')], max_length=20)),
                ('instructions', models.TextField()),
                ('order', models.IntegerField(default=0)),
                ('points', models.IntegerField(default=10, validators=[django.core.validators.MinValueValidator(0)])),
            ],
            options={
                'verbose_name': 'Exercise',
                'verbose_name_plural': 'Exercises',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='GrammarContent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('explanation', models.TextField(help_text='Explicação da regra gramatical')),
                ('order', models.IntegerField(default=0)),
            ],
            options={
                'verbose_name': 'Grammar Content',
                'verbose_name_plural': 'Grammar Contents',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Theme',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('icon', models.CharField(default='🎯', max_length=50)),
                ('order', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Theme',
                'verbose_name_plural': 'Themes',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('number', models.IntegerField(unique=True)),
                ('description', models.TextField()),
                ('icon', models.CharField(default='📚', help_text='Emoji ou ícone', max_length=50)),
                ('order', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Unit',
                'verbose_name_plural': 'Units',
                'ordering': ['order', 'number'],
            },
        ),
        migrations.CreateModel(
            name='DialogueLine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('speaker', models.CharField(max_length=50)),
                ('text', models.TextField()),
                ('translation', models.TextField(blank=True)),
                ('audio', models.FileField(blank=True, null=True, upload_to='audio/dialogues/')),
                ('order', models.IntegerField(default=0)),
                ('dialogue', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lines', to='courses.dialoguecontent')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='ExerciseSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('max_score', models.IntegerField()),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('time_spent', models.IntegerField(blank=True, help_text='Tempo gasto em segundos', null=True)),
                ('exercise', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='courses.exercise')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-submitted_at'],
            },
        ),
        migrations.CreateModel(
            name='GrammarExample',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(blank=True, max_length=100)),
                ('verb_form', models.CharField(blank=True, max_length=100)),
                ('example_sentence', models.TextField()),
                ('translation', models.TextField(blank=True)),
                ('order', models.IntegerField(default=0)),
                ('grammar_content', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='examples', to='courses.grammarcontent')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField()),
                ('hint', models.CharField(blank=True, max_length=200)),
                ('explanation', models.TextField(blank=True, help_text='Explicação da resposta correta')),
                ('order', models.IntegerField(default=0)),
                ('points', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(0)])),
                ('exercise', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='courses.exercise')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='FillBlankAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('correct_answer', models.CharField(max_length=200)),
                ('alternative_answers', models.TextField(blank=True, help_text='Respostas alternativas aceitas, separadas por vírgula')),
                ('case_sensitive', models.BooleanField(default=False)),
                ('question', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='fill_blank_answer', to='courses.question')),
            ],
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer_text', models.CharField(max_length=500)),
                ('is_correct', models.BooleanField(default=False)),
                ('order', models.IntegerField(default=0)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='courses.question')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='QuestionResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student_answer', models.TextField()),
                ('is_correct', models.BooleanField()),
                ('points_earned', models.IntegerField(default=0)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='courses.question')),
                ('submission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='courses.exercisesubmission')),
            ],
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('topic_type', models.CharField(choices=[('vocabulary', 'Vocabulary'), ('grammar', 'Grammar'), ('reading', 'Reading'), ('writing', 'Writing'), ('listening', 'Listening'), ('speaking', 'Speaking'), ('pronunciation', 'Pronunciation')], max_length=20)),
                ('icon', models.CharField(default='📝', max_length=50)),
                ('description', models.TextField(blank=True)),
                ('order', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('theme', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='topics', to='courses.theme')),
            ],
            options={
                'verbose_name': 'Topic',
                'verbose_name_plural': 'Topics',
                'ordering': ['order'],
            },
        ),
        migrations.AddField(
            model_name='grammarcontent',
            name='topic',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grammar_contents', to='courses.topic'),
        ),
        migrations.AddField(
            model_name='exercise',
            name='topic',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exercises', to='courses.topic'),
        ),
        migrations.CreateModel(
            name='ExampleBox',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default='Examples', max_length=200)),
                ('content', models.TextField()),
                ('box_type', models.CharField(choices=[('example', 'Example'), ('tip', 'Tip'), ('warning', 'Warning'), ('info', 'Information')], default='example', max_length=20)),
                ('order', models.IntegerField(default=0)),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='example_boxes', to='courses.topic')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.AddField(
            model_name='dialoguecontent',
            name='topic',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dialogues', to='courses.topic'),
        ),
        migrations.AddField(
            model_name='theme',
            name='unit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='themes', to='courses.unit'),
        ),
        migrations.CreateModel(
            name='VocabularyItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('word', models.CharField(max_length=100)),
                ('translation', models.CharField(max_length=100)),
                ('pronunciation', models.CharField(blank=True, max_length=100)),
                ('image', models.ImageField(blank=True, null=True, upload_to='vocabulary/')),
                ('audio', models.FileField(blank=True, null=True, upload_to='audio/vocabulary/')),
                ('example_sentence', models.TextField(blank=True)),
                ('order', models.IntegerField(default=0)),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vocabulary_items', to='courses.topic')),
            ],
            options={
                'verbose_name': 'Vocabulary Item',
                'verbose_name_plural': 'Vocabulary Items',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='StudentProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('completion_percentage', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='progress', to=settings.AUTH_USER_MODEL)),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='courses.unit')),
            ],
            options={
                'verbose_name': 'Student Progress',
                'verbose_name_plural': 'Student Progress',
                'unique_together': {('student', 'unit')},
            },
        ),
    ]
